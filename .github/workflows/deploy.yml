name: Deploy Docker Containers

on:
  push:
    branches:
      - main  # Change this to your default branch if different

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up AWS CLI  
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        env:
         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
         AWS_REGION: ${{ secrets.AWS_REGION }}
 

      - name: Build and Push Docker Images
        run: |
          # Build your Docker images for ECR Repo 1
          docker build -t webapp .
          docker tag webapp:latest ${{ secrets.ECR_REPO1 }}:latest
          docker push ${{ secrets.ECR_REPO1 }}:latest

          # Build your Docker images for ECR Repo 2
          docker build -t mysql .
          docker tag mysql:latest ${{ secrets.ECR_REPO2 }}:latest
          docker push ${{ secrets.ECR_REPO2 }}:latest
          
      - name: Deploy to EC2
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_INSTANCE_IP: ${{ secrets.EC2_INSTANCE_IP }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
           # Save the private SSH key to a temporary file
            echo "$EC2_SSH_KEY" > key.pem
            chmod 400 key.pem
            
          # SSH into the EC2 instance and deploy the Docker containers
           ssh -o StrictHostKeyChecking=no -i key.pem $EC2_USER@$EC2_INSTANCE_IP << 'EOF'
            
          # Create a new Docker network
           docker network create my-network

          # Login to ECR for MySQL repo
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPO2 }}
          docker pull ${{ secrets.ECR_REPO2 }}:latest
          docker stop mysql || true
          docker rm -f mysql || true
          docker run --name mysql --network my-network -e MYSQL_ROOT_PASSWORD=${{ secrets.DBPWD }} -e MYSQL_DATABASE=${{ secrets.DB }} -d ${{ secrets.ECR_REPO2 }}:latest

          # Login to ECR for web app repo
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPO1 }}
          docker pull ${{ secrets.ECR_REPO1 }}:latest
          docker stop blue || true
          docker stop pink || true
          docker stop lime || true
            
          docker rm -f blue || true
          docker rm -f pink || true
          docker rm -f lime || true
            
          docker run --name blue --network my-network -e APP_COLOR=blue -e DBHOST=${{ secrets.DBHOST }} -e DBUSER=${{ secrets.DBUSER }} -e DBPWD=${{ secrets.DBPWD }} -e DATABASE=${{ secrets.DB }} -e DBPORT=${{ secrets.DBPORT }} -p ${{ secrets.PORT }} -d ${{ secrets.ECR_REPO1 }}
          docker run --name pink --network my-network -e APP_COLOR=pink -e DBHOST=${{ secrets.DBHOST }} -e DBUSER=${{ secrets.DBUSER }} -e DBPWD=${{ secrets.DBPWD }} -e DATABASE=${{ secrets.DB }} -e DBPORT=${{ secrets.DBPORT }} -p ${{ secrets.PORT }} -d ${{ secrets.ECR_REPO1 }}
          docker run --name lime --network my-network -e APP_COLOR=lime -e DBHOST=${{ secrets.DBHOST }} -e DBUSER=${{ secrets.DBUSER }} -e DBPWD=${{ secrets.DBPWD }} -e DATABASE=${{ secrets.DB }} -e DBPORT=${{ secrets.DBPORT }} -p ${{ secrets.PORT }} -d ${{ secrets.ECR_REPO1 }}
            
          EOF
          
          # Clean up the private key file
          rm -f key.pem
